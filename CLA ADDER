
`timescale 1ns/1ns
module CLA(S[3:0],Cout,A[3:0],B[3:0],Cin);
input [3:0]A,B;
input Cin;
wire [3:0]P,G;
wire [9:0]M;
wire [3:1]C;
output [3:0]S;
output Cout;

 xor #2 (P[0],A[0],B[0]);
 xor #2(P[1],A[1],B[1]);
 xor #2(P[2],A[2],B[2]);
 xor #2(P[3],A[3],B[3]); 
   
 and #2(G[0],A[0],B[0]);
 and #2(G[1],A[1],B[1]);
 and #2(G[2],A[2],B[2]);
 and #2(G[3],A[3],B[3]);
 

 and #2 (M[0],P[0],Cin);
 or #2 (C[1],G[0],M[0]);  
 
 and #3 (M[1],P[1],P[0],Cin);
 and #2 (M[2],P[1],G[0]);
 or #3(C[2],G[1],M[1],M[2]);

 and #2(M[3],G[1],P[2]);
 and #3(M[4],P[2],P[1],G[0]);
 and #4(M[5],P[2],P[1],P[0],Cin);
 or #4 (C[3],G[2],M[3],M[4],M[5]);
 
 and #2 (M[6],P[3],G[2]);
 and #3 (M[7],P[3],P[2],G[1]);
 and #4 (M[8],P[3],P[2],P[1],G[0]);
 and #5 (M[9],P[3],P[2],P[1],P[0],Cin);
 or #5 (Cout,G[3],M[6],M[7],M[8],M[9]);

   
 xor #2 (S[0],P[0],Cin);
 xor #2 (S[1],P[1],C[1]);   
 xor #2(S[2],P[2],C[2]); 
 xor #2 (S[3],P[3],C[3]);   
 
    endmodule
